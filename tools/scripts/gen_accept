#!/usr/bin/perl -W
#
#  Generates the accept methods for the AST nodes.
#
use integer;
use strict;

sub visit(@);
sub enter(@);
sub gen_enter_cases(@);
sub gen_exit_cases($@);

my %tags;
my %nat;

while (<>) {
    next if m/^\s*$/;
    my ($nat, $class, $tag, $name) = split;
    $nat{$class} = $nat;
    if (defined $tags{$class}) {
	push @{$tags{$class}}, $tag;
    } else {
	$tags{$class} = [ $tag ];
    }
}

foreach my $class (sort keys %tags) {
    print "--------------------\n";
    print "$class\n";
    print "--------------------\n\n";
    
    if ($nat{$class} eq 'leaf') {
	visit(@{$tags{$class}});
    } elsif ($nat{$class} eq 'parent') {
	enter(@{$tags{$class}});
    } else {
	die;
    }
}



sub visit(@) {
    my ($class, $tag, $name) = @_;
    print <<EOT;
	\@Override
	public boolean accept(IVisitor visitor) {
		switch (getTag()) {
EOT
    gen_exit_cases('visit', @_);
    print <<EOT;
		}
	}
EOT
}

sub enter(@) {
    print <<EOT;
	\@Override
	public boolean accept(IVisitor visitor) {
		boolean goOn = true;

		switch (getTag()) {
EOT
    gen_enter_cases(@_);
    print <<EOT;
		}

		for (int i = 0; goOn && i < children.length; i++) {
			goOn = children[i].accept(visitor);
		}
		
		switch (getTag()) {
EOT
    gen_exit_cases('exit', @_);
    print <<EOT;
		}
	}
EOT
}

sub compute_lengths(@) {
    my $min_len = 10000;
    my $max_len = 0;
    foreach (@_) {
	$min_len = length if $min_len > length;
	$max_len = length if $max_len < length;
    }
    return $max_len;
}

sub gen_enter_cases(@) {
    my $max_len = compute_lengths(@_);

    foreach my $tag (@_) {
	printf("\t\tcase %-*s goOn = visitor.enter%s(this);%*s break;\n",
	       $max_len + 1, "$tag:", $tag, $max_len - length($tag), '');
    }
    printf("\t\tdefault:%*s assert false;\n", $max_len - 2, '');
}

sub gen_exit_cases($@) {
    my $name = shift;
    my $max_len = compute_lengths(@_);

    foreach my $tag (@_) {
	printf("\t\tcase %-*s return visitor.%s%s(this);\n",
	       $max_len + 1, "$tag:", $name, $tag);
    }
    printf("\t\tdefault:%*s return true;\n", $max_len - 2, '');
}
